generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(uuid())
  email              String        @unique
  password           String?
  name               String?
  emailVerified      DateTime?
  image              String?
  locale             String        @default("en")
  lastLoginAt        DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  isActive           Boolean       @default(true)
  accountStatus      String        @default("active") // active, suspended, disabled
  suspendedAt        DateTime?
  suspendedReason    String?
  suspendedBy        String?
  storageQuotaBytes  BigInt        @default(10737418240) // 10GB default
  usedStorageBytes   BigInt        @default(0)
  
  // Relations
  roles              UserRole[]
  files              File[]        @relation("ownerFiles")
  folders            Folder[]
  notifications      Notification[]
  auditLogs          AuditLog[]    @relation("actorLogs")
  sessions           Session[]
  createdVersions    FileVersion[]
  createdPermissions Permission[]  @relation("createdByPermissions")
  createdSharedLinks SharedLink[]
  permissions        Permission[]
  accounts           Account[]
  loginHistory       LoginHistory[]
  settings           UserSettings?
  storageQuota       StorageQuota?
  quotaHistory       QuotaHistory[]
  
  @@index([email])
  @@index([isActive])
  @@index([accountStatus])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       UserRole[]
  permissions Permission[]
}

model UserRole {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int
  @@unique([userId, roleId])
}

model Folder {
  id         String       @id @default(uuid())
  name       String
  owner      User?        @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId    String?
  parentId   String?
  parent     Folder?      @relation("folder_children", fields: [parentId], references: [id], onDelete: Cascade)
  children   Folder[]     @relation("folder_children")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  files      File[]
  permissions Permission[]
  path       String?
  @@index([ownerId])
  @@index([parentId])
}

model File {
  id           String       @id @default(uuid())
  name         String
  slug         String?      @unique
  owner        User         @relation("ownerFiles", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  folder       Folder?      @relation(fields: [folderId], references: [id], onDelete: SetNull)
  folderId     String?
  size         Int
  mimeType     String
  storageKey   String
  storageId    String?
  metadata     Json?
  versions     FileVersion[]
  permissions  Permission[]
  sharedLinks  SharedLink[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  isArchived   Boolean      @default(false)
  deletedAt    DateTime?
  searchVector String?      @db.Text
  @@index([ownerId])
  @@index([folderId])
  @@index([createdAt])
}

model FileVersion {
  id          String   @id @default(uuid())
  file        File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId      String
  version     Int
  storageKey  String
  size        Int
  mimeType    String
  createdAt   DateTime @default(now())
  createdBy   User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById String?
  @@unique([fileId, version])
  @@index([fileId])
}

model Permission {
  id          Int      @id @default(autoincrement())
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  role        Role?    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId      Int?
  file        File?    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId      String?
  folder      Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String?
  canRead     Boolean  @default(true)
  canWrite    Boolean  @default(false)
  canShare    Boolean  @default(false)
  createdAt   DateTime @default(now())
  createdBy   User?    @relation("createdByPermissions", fields: [createdById], references: [id], onDelete: SetNull)
  createdById String?
  @@index([userId])
  @@index([roleId])
  @@index([fileId])
  @@index([folderId])
}

model SharedLink {
  id           String   @id @default(uuid())
  file         File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId       String
  token        String   @unique
  createdBy    User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById  String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime?
  maxDownloads Int?
  downloads    Int      @default(0)
  isActive     Boolean  @default(true)
  permission   String   @default("read")
  passwordHash String?
  notes        String?
  @@index([fileId])
  @@index([expiresAt])
  @@index([token])
}

model Notification {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  type        String
  data        Json
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  delivered   Boolean   @default(false)
  deliveredAt DateTime?
  @@index([userId, isRead])
  @@index([createdAt])
}

model AuditLog {
  id         String   @id @default(uuid())
  actor      User?    @relation("actorLogs", fields: [actorId], references: [id], onDelete: SetNull)
  actorId    String?
  action     String
  targetType String?
  targetId   String?
  payload    Json?
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())
  @@index([actorId, createdAt])
  @@index([createdAt])
}

model StorageProvider {
  id        String   @id @default(uuid())
  name      String
  type      String
  config    Json
  createdAt DateTime @default(now())
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
}

model LoginHistory {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  ip        String?
  userAgent String?
  device    String?
  location  String?
  status    String   // "success" or "failed"
  createdAt DateTime @default(now())
  
  @@index([userId, createdAt])
  @@index([createdAt])
}


model UserSettings {
  id                    String   @id @default(uuid())
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String   @unique
  
  // UI Preferences
  theme                 String   @default("system") // light, dark, system
  language              String   @default("ar") // ar, en
  dateFormat            String   @default("DD/MM/YYYY")
  timeFormat            String   @default("24") // 12, 24
  timezone              String   @default("Africa/Cairo")
  
  // Notification Preferences
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(true)
  desktopNotifications  Boolean  @default(false)
  
  // Email Notification Types
  notifyOnUpload        Boolean  @default(true)
  notifyOnShare         Boolean  @default(true)
  notifyOnComment       Boolean  @default(true)
  notifyOnMention       Boolean  @default(true)
  notifyOnStorageLimit  Boolean  @default(true)
  notifyOnLoginAttempt  Boolean  @default(true)
  notifyOnFileExpiry    Boolean  @default(true)
  
  // Upload Preferences
  defaultFolderId       String?
  autoOrganize          Boolean  @default(false)
  compressImages        Boolean  @default(false)
  generateThumbnails    Boolean  @default(true)
  
  // Privacy Settings
  profileVisibility     String   @default("private") // public, private, contacts
  showOnlineStatus      Boolean  @default(true)
  allowIndexing         Boolean  @default(false)
  
  // File Management
  defaultSortBy         String   @default("name") // name, date, size, type
  defaultViewMode       String   @default("grid") // grid, list
  showHiddenFiles       Boolean  @default(false)
  autoDeleteTrashed     Int      @default(30) // Days
  
  // Security
  sessionTimeout        Int      @default(30) // Minutes
  requireReauth         Boolean  @default(false)
  loginAlerts           Boolean  @default(true)
  
  // Sharing Defaults
  defaultSharePermission String  @default("view") // view, edit, comment
  defaultLinkExpiry     Int?     // Days
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([userId])
}

model StorageQuota {
  id                String   @id @default(uuid())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @unique
  
  // Quota Management
  quotaBytes        BigInt
  usedBytes         BigInt   @default(0)
  filesCount        Int      @default(0)
  foldersCount      Int      @default(0)
  
  // Limits
  maxFileSize       BigInt?
  maxFiles          Int?
  allowedFileTypes  String[]
  
  // Bandwidth (optional)
  monthlyBandwidthBytes BigInt?
  usedBandwidthBytes    BigInt  @default(0)
  bandwidthResetDate    DateTime?
  
  // History
  lastCalculated    DateTime @default(now())
  assignedBy        String?
  assignedAt        DateTime @default(now())
  notes             String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([userId])
}

model QuotaHistory {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  previousQuota   BigInt
  newQuota        BigInt
  changedBy       String
  reason          String?
  createdAt       DateTime @default(now())
  
  @@index([userId, createdAt])
  @@index([createdAt])
}


model SystemSettings {
  id          String   @id @default(uuid())
  key         String   @unique
  value       Json
  category    String   // "security", "storage", "upload", "email", "general"
  description String?
  isPublic    Boolean  @default(false)
  updatedBy   String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  
  @@index([category])
  @@index([key])
}

model FileTypePolicy {
  id              Int      @id @default(autoincrement())
  mimeType        String   @unique
  extension       String?
  category        String?  // "image", "video", "document", "audio", "archive"
  
  // Policy
  isAllowed       Boolean  @default(true)
  maxFileSize     BigInt?
  requiresApproval Boolean @default(false)
  
  // Virus Scanning
  scanOnUpload    Boolean  @default(true)
  
  // Processing
  generatePreview Boolean  @default(false)
  convertFormat   String?
  
  // Metadata
  displayName     String?
  icon            String?
  color           String?
  
  // Audit
  createdBy       String?
  updatedBy       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([category])
  @@index([isAllowed])
}
